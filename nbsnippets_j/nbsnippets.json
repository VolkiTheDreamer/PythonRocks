{
    "name": "My Scripts",
    "sub-menu": [
        {
            "name": "General Python",
            "sub-menu": [
                {
                    "name": "a-href",
                    "snippet": [
                        "<a href='url'>şuraya</a>"
                    ]
                },
                {
                    "name": "citation",
                    "snippet": [
                        "<p style='font-size:smaller;text-align:center'>Görsel <a href='url'>bu sayfadan</a> alınmıştır</p>"
                    ]
                },
                {
                    "name": "reload",
                    "snippet": [
                        "%load_ext autoreload",
                        "%autoreload 2"
                    ]
                },
                {
                    "name": "youtube",
                    "snippet": [
                        "from IPython.display import YouTubeVideo",
                        "YouTubeVideo('videoid')"
                    ]
                },
                {
                    "name": "multiouput",
                    "snippet": [
                        "from IPython.core.interactiveshell import InteractiveShell",
                        "InteractiveShell.ast_node_interactivity = 'all'"
                    ]
                },
                {
                    "name": "plot zoom",
                    "snippet": [
                        "plt.xlim(lowerX, upperX)",
                        "plt.ylim(lowerY, upperY)"
                    ]
                }                
            ]
        },
        {
            "name": "DA&DS&ML imports",
            "sub-menu": [                                
                {
                    "name": "import EDA",
                    "snippet": [
                        "import numpy as np",
                        "import pandas as pd",
                        "import matplotlib.pyplot as plt",
                        "import seaborn as sns",
                        "from mypyext import mymagics",
                        "from mypyext import pythonutility as pu",
                        "from mypyext import dataanalysis as da",
                        "from dataprep.eda import plot, plot_correlation, plot_missing, create_report",
                        "import sweetviz as sv"
                    ]
                },
                {
                    "name": "import ML",
                    "snippet": [
                        "from mypyext import ml",
                        "from sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict,StratifiedKFold,RepeatedKFold,RepeatedStratifiedKFold",
                        "from sklearn.experimental import enable_iterative_imputer",
                        "from sklearn.impute import SimpleImputer,IterativeImputer,KNNImputer",                        
                        "from sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler",
                        "from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder",
                        "from category_encoders import OrdinalEncoder as COE",
                        "from sklearn.decomposition import PCA",
                        "from sklearn.compose import ColumnTransformer",
                        "from sklearn.preprocessing import FunctionTransformer",
                        "from sklearn.base import TransformerMixin,BaseEstimator",
                        "from sklearn.pipeline import Pipeline,make_pipeline",
                        "from sklearn.preprocessing import FunctionTransformer",
                        "from sklearn.model_selection import GridSearchCV,RandomizedSearchCV",
                        "from sklearn.feature_selection import VarianceThreshold,SelectKBest, chi2, f_classif, mutual_info_classif,RFE,RFECV",
                        ""
                    ]
                },
                {
                    "name": "traintest",
                    "snippet": [
                        "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25, random_state=42)"
                    ]
                },
                {
                    "name": "import Regression",
                    "snippet": [
                        "from sklearn.linear_model import LinearRegression,BayesianRidge,Lasso",
                        "from sklearn.neighbors import KNeighborsRegressor",
                        "from sklearn.tree import DecisionTreeRegressor",
                        "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor",
                        "from sklearn.ensemble import GradientBoostingRegressor, BaggingRegressor, AdaBoostRegressor",
                        "from xgboost import XGBRegressor",
                        "from sklearn.metrics import mean_squared_error"                        
                    ]
                },
                {
                    "name": "import Classification",
                    "snippet": [
                        "from sklearn.linear_model import LogisticRegression",                        
                        "from sklearn.tree import DecisionTreeClassifier",
                        "from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,GradientBoostingClassifier, AdaBoostClassifier,BaggingClassifier,VotingClassifier",                        
                        "from xgboost import XGBClassifier",
                        "from lightgbm import LGBMClassifier",
                        "from sklearn.neighbors import KNeighborsClassifier",
                        "from sklearn.naive_bayes import BernoulliNB, MultinomialNB",
                        "from sklearn.svm import SVC",
                        "from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score",
                        "from sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,ConfusionMatrixDisplay",
                        "from sklearn.metrics import auc,roc_auc_score,precision_recall_curve,roc_curve,brier_score_loss"
                    ]
                },
                {
                    "name": "import Clustering",
                    "snippet": [
                        "from sklearn.cluster import AgglomerativeClustering, KMeans, DBSCAN",
                        "from sklearn.neighbors import NearestNeighbors",
                        "from sklearn.model_selection import ParameterGrid",
                        "from sklearn.metrics import silhouette_samples,silhouette_score,adjusted_rand_score,homogeneity_score,completeness_score,v_measure_score,davies_bouldin_score",
                        "from scipy.cluster.hierarchy import dendrogram, linkage",
                        "from sklearn.metrics.cluster import calinski_harabasz_score"
                        
                    ]
                },

                {
                    "name": "import statistics",
                    "snippet": [
                        "from dython.nominal import cramers_v, correlation_ratio",
                        "from scipy.stats import chi2_contingency",
                        "import scipy.stats as stats",
                        "from scipy.stats import spearmanr",
                        ""
                    ]
                },
                {
                    "name": "import distance&similarity",
                    "snippet": [
                        "from scipy.spatial import distance",
                        "",
                        ""
                    ]
                },
                {
                    "name": "import NLP",
                    "snippet": [
                        "from sklearn.naive_bayes import BernoulliNB, MultinomialNB",
                        "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer,TfidfVectorizer",
                        "from nltk.tokenize import word_tokenize,wordpunct_tokenize,sent_tokenize,regexp_tokenize",
                        "from nltk.tokenize import RegexpTokenizer,WordPunctTokenizer #üstteki gibi metod olarak da çağrıalbilir",
                        "from nltk.tokenize import TweetTokenizer",
                        "import nltk",
                        "from nltk.stem import WordNetLemmatizer #sadece ingilzice desteği var",
                        "from nltk.corpus import wordnet",
                        "from nltk.tag import pos_tag"
                    ]
                }

            ]
        },
        {
            "name": "Pipeline & Gridsearch",
            "sub-menu": [
                {
                    "name": "Basic Pipeline",
                    "snippet": [
                        "pipeline = Pipeline(steps =[",
                                "\t('ss', StandardScaler()),",                                
                                "\t('clf', LogisticRegression())",
                                "])"

                    ]
                },
                {
                    "name": "ColTrans + Pipeline",
                    "snippet": [
                        "def customFunc(df,param):",                            
                            "\t#.....",
                            "\treturn 0\n",
                        "coltrans = ColumnTransformer([",
                            "\t('c1',OneHotEncoder(),[1,2,3]),",
                            "\t('c2',FunctionTransformer(customFunc,kw_args=dict(param=cats)),[e for e,v in enumerate(X.columns) if v in catspipe])",
                            "],remainder = 'passthrough')\n",
                        "pipeline = Pipeline(steps =[",
                                "\t('ct', coltrans),",                                
                                "\t('clf', LogisticRegression())",
                                "])"

                    ]
                },
                {
                    "name": "SubPipeline + ColTrans + MainPipeline",
                    "snippet": [
                        "def customFunc(df,param):",                            
                            "\t#.....",
                            "\treturn 0\n",
                        "num_pipe=Pipeline([",
                            "\t'p1', IterativeImputer(estimator=DecisionTreeRegressor(random_state=0))),",
                            "\t('p2', FunctionTransformer(cap_outliers))",
                            "])\n",     
                        "cat_pipe=Pipeline([",
                            "\t('p1', IterativeImputer(estimator=DecisionTreeRegressor(random_state=0))),",
                            "\t('p2', FunctionTransformer(cap_outliers))",
                            "])\n",
                        "coltrans = ColumnTransformer([",
                            "\t('c1',num_pipe,[e for e,v in enumerate(X.columns) if v in nums]),",
                            "\t('c2',FunctionTransformer(categoricImputer,kw_args=dict(param=cats)),[e for e,v in enumerate(X.columns) if v in catspipe])",
                            "],remainder = 'passthrough')\n",
                        "pipeline = Pipeline(steps =[",
                                "\t('ct', coltrans),",                                
                                "\t('clf', LogisticRegression())",
                                "])\n"
                    ]
                },               
                {
                    "name": "Params & Gridsearch",
                    "snippet": [
                        "params = [",
                            "\t{",
                              "\t\t'tf1__p1__ii__max_iter':[5,10,15],",
                              "\t\t'tf1__p1__ii__base_estimator__max_features':['log2','sqrt'],",
                            "\t}",
                            "\t,",
                            "\t{",
                              "\t\t'tf1__p1__ii__max_iter':[5,10,15],",
                              "\t\t'tf1__p1__ii__base_estimator__max_features':['log2','sqrt'],",
                            "\t}",                            
                           "]\n",
                           "gs = GridSearchCV(pipeline, params, cv=cv, scoring='scorename',n_jobs=-1,verbose=1)",
                           "gs.fit(X, y)",
                           "gs.best_params_",
                           "gs.best_score_"
                    ]
                }
            ]
        }        
    ]
}